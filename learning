  # problem 1 (control flow)
def fizzbuzz(n):
    x = 0
    while x <= n:
      if x%3 == 0 and x%5 == 0:
       print("fizzbuzz")
      elif x%3 == 0:
       print("fizz")
      elif x%5 == 0:
       print ("buzz")
      else:
       print (x)
      x+=1


#problem 2 (control flow))
def multiply(a, b):
  count = 0
  result = 0
 
  if a>0 and b>0:
    while count < b:
      result += a
      count += 1
  elif a<0 and b>0:
    while count < b:
      result += a
      count += 1
 
  elif a>0 and b<0:
    while count < a:
      result += b
      count += 1
 
  else:
    a = abs(a) 
    b = abs(b)
    while count < b:
      result += a
      count += 1
 
  return result

   #problem 3 (control flow)
def check_prime(x):
   if x == 0 or x == 1:
    return False
   for a in range(2, x):
    if(x % a == 0):
      return False
   else :
    return True

def prime_numbers(n):
  a = 0
  num = 0
  while(a < n):
    if(check_prime(num)):
      a += 1
      print(num)
    num += 1

#problem 1 (lists)
def gl(start, end, step):
  list=[]
  while (start < end and step > 0) or (start > end and step < 0):
    list.append(start)
    start+=step
  return list 
  
#problem 2 (reverse list)
def reverse_list(mylist):
  i = len(mylist)
  rev_list = []
  while i > 0:
    rev_list += [mylist[i - 1]]
    i -= 1
  return rev_list

#problem 2 (loops)
  
def is_in_list(n, lst):
    
    for i in lst:
        if i==n :
            in_list = True
            break
    in_list = False
    return in_list

def intersection(lst1, lst2):
  for a in lst1 :
     for i in lst2:
       if a==i:
         print(str(a))
         break 


ogramming-Fundamentals-with-Python
